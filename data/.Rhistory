br(),
h2('Dataset'),
p('FEMA assists individuals and households through the coordination and delivery of Individual Assistance (IA) programs. IA includes a number of other programs, including Individuals and Households Program (IHP) and that in turn includes Housing Assistance (HA) and Other Needs Assistance (ONA). There we use the data from', span(a('Housing Assistance Owners',href = 'https://www.fema.gov/openfema-data-page/housing-assistance-program-data-owners-v2')),"and", span(a('Housing Assistance Renters', href = 'https://www.fema.gov/openfema-data-page/housing-assistance-program-data-renters-v2')), 'datasets.')
),
div(class = 'footer', 'Group 2')
),
tabPanel(
'Frequency',
sidebarLayout(
sidebarPanel(
radioButtons("year_selector", "Select Year Range or Single Year:",
choices = c("Year Range" = "range", "Single Year" = "single"),
selected = "range"),
uiOutput("yearInput")
),
mainPanel(
tabsetPanel(
tabPanel("Disaster Declarations",
plotlyOutput("disasterPlot")
),
tabPanel("Most Prevalent Disaster",
plotlyOutput("prevalent_incident")
)
),
br(),
br(),
plotlyOutput("incidentPieChart")
)
)
),
tabPanel('Statistics',
mainPanel(width = 12,
h2('Statistics Summary')
),
wellPanel(
tabsetPanel(type="tabs",
tabPanel(title="Bar Chart of Damage vs. Assistance",
br(),
h1("should be a plots here")
),
tabPanel(title="Pie Chart of Each Incident Damage",
br(),
h1("should be a plots here")
),
tabPanel(title="Empirial Distribution",
br(),
h1("should be a plots here")
)
)
),
absolutePanel(style = 'opacity: 0.5; controls:hover{opacity: 1}',id = "filter1", class = "panel panel-default", fixed = TRUE, draggable = TRUE,
top = 50, left = "auto", right = 20, bottom = "auto", width = 200, height = "auto",
h3("FILTER"),
selectInput("state1", "STATE", choices=c("National" = "national","AK" = "AK", "AL" = "AL", "AR" = "AR", "AS" = "AS", "AZ" = "AZ", "CA" = "CA", "CO" = "CO", "CT" = "CT", "DC" = "DC", "DE" = "DE", "FL" = "FL", "GA" = "GA", "GU" = "GU", "IA" = "IA", "IL" = "IL", "IN" = "IN", "KS" = "KS", "KY" = "KY", "LA" = "LA", "MA" = "MA", "MD" = "MD", "ME" = "ME", "MI" = "MI", "MN" = "MN", "MO" = "MO", "MP" = "MP", "MS" = "MS", "MT" = "MT", "NC" = "NC", "ND" = "ND", "NE" = "NE", "NH" = "NH", "NJ" = "NJ", "NM" = "NM", "NV" = "NV", "NY" = "NY", "OH" = "OH", "OK" = "OK", "OR" = "OR", "PA" = "PA", "PR" = "PR", "RI" = "RI", "SC" = "SC", "SD" = "SD", "TN" = "TN", "TX" = "TX", "UT" = "UT", "VA" = "VA", "VI" = "VI", "VT" = "VT", "WA" = "WA", "WI" = "WI", "WV" = "WV", "WY" = "WY")),
checkboxGroupInput("incident1", "Incident Typer:",
choices = c("All","Flood","Hurricane","Severe Storm","Tornado","Earthquake","Fire","Winter Storm","Severe Ice Storm","Dam/Levee Break","Typhoon","Mud/Landslide","Other"),
selected = c("All","Flood","Hurricane","Severe_Storm","Tornado","Earthquake","Fire","Winter_Storm","Severe_Ice_Storm","Dam_Levee_Break","Typhoon","Mud_Landslide","Other"))
),
absolutePanel(style = 'opacity: 0.5; controls:hover{opacity: 1}',id = "filter1", class = "panel panel-default", fixed = TRUE, draggable = TRUE,
top = 200, left = "auto", right = 220, bottom = "auto", width = 200, height = "auto",
h3("FILTER"),
sliderInput("percentile1_d", "Select the percentile of Total Damage", min=0, max=100, value=100, step=0.5),
sliderInput("percentile1_a", "Select the percentile of Approved Amount", min=0, max=100, value=100, step=0.5),
)
),
tabPanel("Map",
mainPanel(width = 12,
fluidRow(splitLayout(
cellWidths = c("50%","50%"),
leafletOutput("out2", height = "600"),
leafletOutput("out3", height = "600")
))
),
absolutePanel(style = 'opacity: 0.5; controls:hover{opacity: 1}',id = "filter1", class = "panel panel-default", fixed = TRUE, draggable = TRUE,
top = 50, left = "auto", right = 20, bottom = "auto", width = 600, height = "auto",
h3("FILTER"),
checkboxGroupInput("state2", "STATE", inline = TRUE,choices=c('None', unique(dat$state))),
checkboxGroupInput("incident2", "Incident Typer:",
choices = c("None",unique(data$incidentType))
)
)
),
tabPanel('Data')
)
)
)
rep(0.1,5)
as.character(c(1,2,3))
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
quantile(dat,0.5)
quantile(dat$total_damage_sum,0.5)
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
library(shiny)
library(DT)
library(leaflet)
library(leaflet.extras)
library(DT)
library(choroplethrZip)
library(lubridate)
library(dplyr)
library(plotly)
library(ggplot2)
library(RColorBrewer)
library(data.table)
setwd('D:/rscript')
disaster_declaration <- read.csv("FemaWebDisasterDeclarations.csv")
disaster_declaration <- disaster_declaration[,-c(2,5,10:13,18:20)]
disaster_declaration$incidentBeginDate <- as.POSIXct(disaster_declaration$incidentBeginDate, format = "%Y-%m-%dT%H:%M:%S.%OS")
disaster_declaration$year <- year(disaster_declaration$incidentBeginDate)
#disaster_summary <- read.csv("C:\\Users\\wangj\\Desktop\\ADS-Project2\\FemaWebDisasterSummaries.csv")
#disaster_summary <- disaster_summary[,-c(9,10,12:14)]
#disaster_approved <- inner_join(disaster_declaration, disaster_summary, by = "disasterNumber")
#disaster_owner <- read.csv("C:\\Users\\wangj\\Desktop\\ADS-Project2\\HousingAssistanceOwners.csv")
#disaster_renter <- read.csv("C:\\Users\\wangj\\Desktop\\ADS-Project2\\HousingAssistanceRenters.csv")
top_incident <- disaster_declaration%>%group_by(year, incidentType)%>%summarize(Frequency=n())%>%arrange(year, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
disaster_declaration_na <- colSums(is.na(disaster_declaration))
#disaster_summary_na <- colSums(is.na(disaster_summary))
top_states <- disaster_declaration%>%group_by(year, stateName)%>%summarize(Frequency=n())%>%arrange(year, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
#setdiff(disaster_renter$disasterNumber,disaster_declaration$disasterNumber)
#unique(filter(disaster_declaration,disaster_declaration$stateCode == "AZ")$year)
length(unique(disaster_declaration$disasterNumber))
data <- read.csv("owners_summary_zip.csv")
summary_data <- data %>%
group_by(latitude, longitude) %>%
summarise(
Total_Damage_Sum = sum(total_damage_sum, na.rm = TRUE),
Total_Approved_Amount_Sum = sum(total_approved_amount_sum, na.rm = TRUE),
.groups = 'drop'
)
try_fil <- data %>% filter(latitude>10) %>% filter(incidentType == c('Hurricane', 'Tornado'))
# generate data after applying the filters for map tab
generate_summary_data <- function(state_names, disaster_names) {
if (all(state_names == "None") && all(disaster_names == "None")) {
filtered_data <- data
} else if (all(state_names == "None")) {
filtered_data <- data %>% filter(incidentType %in% disaster_names)
} else if (all(disaster_names == "None")) {
filtered_data <- data %>% filter(state %in% state_names)
} else {
filtered_data <- data %>% filter(state %in% state_names & incidentType %in% disaster_names)
}
summary_data <- filtered_data %>%
group_by(latitude, longitude) %>%
summarise(
Total_Damage_Sum = sum(total_damage_sum, na.rm = TRUE),
Total_Approved_Amount_Sum = sum(total_approved_amount_sum, na.rm = TRUE),
.groups = 'drop'
)
return(summary_data)
}
# generate data after applying the filters for statistics tab
generate_summary_data_stat <- function(state_names, disaster_names, dam_per, apamt_per) {
if (all(state_names == "None") && all(disaster_names == "None")) {
filtered_data <- data
} else if (all(state_names == "None")) {
filtered_data <- data %>% filter(incidentType %in% disaster_names)
} else if (all(disaster_names == "None")) {
filtered_data <- data %>% filter(state %in% state_names)
} else {
filtered_data <- data %>% filter(state %in% state_names & incidentType %in% disaster_names)
}
summary_data <- filtered_data %>%
group_by(latitude, longitude) %>%
summarise(
Total_Damage_Sum = sum(total_damage_sum, na.rm = TRUE),
Total_Approved_Amount_Sum = sum(total_approved_amount_sum, na.rm = TRUE),
.groups = 'drop'
)
return(summary_data)
}
datatable(data)
# tidyr
df <- data.frame(country = c('USA', 'Canada', 'Mexico'),
'2000' = c(5,2,10), '2001' = c(7,3,9))
a <- c(1,2,3,4,5)
df
df %>% filter(X2000 >= percentile(0.1,X2000))
df %>% filter(X2000 >= quantile(0.1,X2000))
df %>% filter(X2000 >= quantile(0.1,df$X2000))
df %>% filter(X2000 >= quantile(df$X2000,0.1))
quantile(df$X2000,0.1))
quantile(df$X2000,0.1)
quantile(X2000,0.1)
df %>% filter(X2000 >= quantile(X2000,0.1))
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
library(shiny)
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
quantile(c(1,2,3),0.1)
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
# tidyr
df <- data.frame(country = c('USA', 'Canada', 'Mexico'),
'2000' = c(5,2,10), '2001' = c(7,3,9))
df%>%mutate(per = X2000/sum(X2000))
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
library(shiny)
library(DT)
library(leaflet)
library(leaflet.extras)
library(DT)
library(choroplethrZip)
library(lubridate)
library(dplyr)
library(plotly)
library(ggplot2)
library(RColorBrewer)
library(data.table)
setwd('D:/rscript')
disaster_declaration <- read.csv("FemaWebDisasterDeclarations.csv")
disaster_declaration <- disaster_declaration[,-c(2,5,10:13,18:20)]
disaster_declaration$incidentBeginDate <- as.POSIXct(disaster_declaration$incidentBeginDate, format = "%Y-%m-%dT%H:%M:%S.%OS")
disaster_declaration$year <- year(disaster_declaration$incidentBeginDate)
#disaster_summary <- read.csv("C:\\Users\\wangj\\Desktop\\ADS-Project2\\FemaWebDisasterSummaries.csv")
#disaster_summary <- disaster_summary[,-c(9,10,12:14)]
#disaster_approved <- inner_join(disaster_declaration, disaster_summary, by = "disasterNumber")
#disaster_owner <- read.csv("C:\\Users\\wangj\\Desktop\\ADS-Project2\\HousingAssistanceOwners.csv")
#disaster_renter <- read.csv("C:\\Users\\wangj\\Desktop\\ADS-Project2\\HousingAssistanceRenters.csv")
top_incident <- disaster_declaration%>%group_by(year, incidentType)%>%summarize(Frequency=n())%>%arrange(year, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
disaster_declaration_na <- colSums(is.na(disaster_declaration))
#disaster_summary_na <- colSums(is.na(disaster_summary))
top_states <- disaster_declaration%>%group_by(year, stateName)%>%summarize(Frequency=n())%>%arrange(year, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
#setdiff(disaster_renter$disasterNumber,disaster_declaration$disasterNumber)
#unique(filter(disaster_declaration,disaster_declaration$stateCode == "AZ")$year)
length(unique(disaster_declaration$disasterNumber))
data <- read.csv("owners_summary_zip.csv")
summary_data <- data %>%
group_by(latitude, longitude) %>%
summarise(
Total_Damage_Sum = sum(total_damage_sum, na.rm = TRUE),
Total_Approved_Amount_Sum = sum(total_approved_amount_sum, na.rm = TRUE),
.groups = 'drop'
)
try_fil <- data %>% filter(latitude>10) %>% filter(incidentType == c('Hurricane', 'Tornado'))
# generate data after applying the filters for map tab
generate_summary_data <- function(state_names, disaster_names) {
if (all(state_names == "None") && all(disaster_names == "None")) {
filtered_data <- data
} else if (all(state_names == "None")) {
filtered_data <- data %>% filter(incidentType %in% disaster_names)
} else if (all(disaster_names == "None")) {
filtered_data <- data %>% filter(state %in% state_names)
} else {
filtered_data <- data %>% filter(state %in% state_names & incidentType %in% disaster_names)
}
summary_data <- filtered_data %>%
group_by(latitude, longitude) %>%
summarise(
Total_Damage_Sum = sum(total_damage_sum, na.rm = TRUE),
Total_Approved_Amount_Sum = sum(total_approved_amount_sum, na.rm = TRUE),
.groups = 'drop'
)
return(summary_data)
}
# generate data after applying the filters for statistics tab
generate_summary_data_stat <- function(state_names, disaster_names, dam_per, apamt_per) {
if (all(state_names == "None") && all(disaster_names == "None")) {
filtered_data <- data
} else if (all(state_names == "None")) {
filtered_data <- data %>% filter(incidentType %in% disaster_names)
} else if (all(disaster_names == "None")) {
filtered_data <- data %>% filter(state %in% state_names)
} else {
filtered_data <- data %>% filter(state %in% state_names & incidentType %in% disaster_names)
}
summary_data <- filtered_data %>%
filter(total_damage_sum >= quantile(filtered_data$total_damage_sum,dam_per/100)) %>%
filter(total_approved_amount_sum >= quantile(filtered_data$total_approved_amount_sum,apamt_per/100)) %>%
group_by(latitude, longitude) %>%
summarise(
Total_Damage_Sum = sum(total_damage_sum, na.rm = TRUE),
Total_Approved_Amount_Sum = sum(total_approved_amount_sum, na.rm = TRUE),
IncidentType = incidentTpye
.groups = 'drop'
library(shiny)
library(DT)
library(leaflet)
library(leaflet.extras)
library(DT)
library(choroplethrZip)
library(lubridate)
library(dplyr)
library(plotly)
library(ggplot2)
library(RColorBrewer)
library(data.table)
setwd('D:/rscript')
disaster_declaration <- read.csv("FemaWebDisasterDeclarations.csv")
disaster_declaration <- disaster_declaration[,-c(2,5,10:13,18:20)]
disaster_declaration$incidentBeginDate <- as.POSIXct(disaster_declaration$incidentBeginDate, format = "%Y-%m-%dT%H:%M:%S.%OS")
disaster_declaration$year <- year(disaster_declaration$incidentBeginDate)
#disaster_summary <- read.csv("C:\\Users\\wangj\\Desktop\\ADS-Project2\\FemaWebDisasterSummaries.csv")
#disaster_summary <- disaster_summary[,-c(9,10,12:14)]
#disaster_approved <- inner_join(disaster_declaration, disaster_summary, by = "disasterNumber")
#disaster_owner <- read.csv("C:\\Users\\wangj\\Desktop\\ADS-Project2\\HousingAssistanceOwners.csv")
#disaster_renter <- read.csv("C:\\Users\\wangj\\Desktop\\ADS-Project2\\HousingAssistanceRenters.csv")
top_incident <- disaster_declaration%>%group_by(year, incidentType)%>%summarize(Frequency=n())%>%arrange(year, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
disaster_declaration_na <- colSums(is.na(disaster_declaration))
#disaster_summary_na <- colSums(is.na(disaster_summary))
top_states <- disaster_declaration%>%group_by(year, stateName)%>%summarize(Frequency=n())%>%arrange(year, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
#setdiff(disaster_renter$disasterNumber,disaster_declaration$disasterNumber)
#unique(filter(disaster_declaration,disaster_declaration$stateCode == "AZ")$year)
length(unique(disaster_declaration$disasterNumber))
data <- read.csv("owners_summary_zip.csv")
summary_data <- data %>%
group_by(latitude, longitude) %>%
summarise(
Total_Damage_Sum = sum(total_damage_sum, na.rm = TRUE),
Total_Approved_Amount_Sum = sum(total_approved_amount_sum, na.rm = TRUE),
.groups = 'drop'
)
try_fil <- data %>% filter(latitude>10) %>% filter(incidentType == c('Hurricane', 'Tornado'))
# generate data after applying the filters for map tab
generate_summary_data <- function(state_names, disaster_names) {
if (all(state_names == "None") && all(disaster_names == "None")) {
filtered_data <- data
} else if (all(state_names == "None")) {
filtered_data <- data %>% filter(incidentType %in% disaster_names)
} else if (all(disaster_names == "None")) {
filtered_data <- data %>% filter(state %in% state_names)
} else {
filtered_data <- data %>% filter(state %in% state_names & incidentType %in% disaster_names)
}
summary_data <- filtered_data %>%
group_by(latitude, longitude) %>%
summarise(
Total_Damage_Sum = sum(total_damage_sum, na.rm = TRUE),
Total_Approved_Amount_Sum = sum(total_approved_amount_sum, na.rm = TRUE),
.groups = 'drop'
)
return(summary_data)
}
# generate data after applying the filters for statistics tab
generate_summary_data_stat <- function(state_names, disaster_names, dam_per, apamt_per) {
if (all(state_names == "None") && all(disaster_names == "None")) {
filtered_data <- data
} else if (all(state_names == "None")) {
filtered_data <- data %>% filter(incidentType %in% disaster_names)
} else if (all(disaster_names == "None")) {
filtered_data <- data %>% filter(state %in% state_names)
} else {
filtered_data <- data %>% filter(state %in% state_names & incidentType %in% disaster_names)
}
summary_data <- filtered_data %>%
filter(total_damage_sum >= quantile(filtered_data$total_damage_sum,dam_per/100)) %>%
filter(total_approved_amount_sum >= quantile(filtered_data$total_approved_amount_sum,apamt_per/100)) %>%
group_by(latitude, longitude) %>%
summarise(
Total_Damage_Sum = sum(total_damage_sum, na.rm = TRUE),
Total_Approved_Amount_Sum = sum(total_approved_amount_sum, na.rm = TRUE),
IncidentType = incidentType
.groups = 'drop'
library(shiny)
library(DT)
library(leaflet)
library(leaflet.extras)
library(DT)
library(choroplethrZip)
library(lubridate)
library(dplyr)
library(plotly)
library(ggplot2)
library(RColorBrewer)
library(data.table)
setwd('D:/rscript')
disaster_declaration <- read.csv("FemaWebDisasterDeclarations.csv")
disaster_declaration <- disaster_declaration[,-c(2,5,10:13,18:20)]
disaster_declaration$incidentBeginDate <- as.POSIXct(disaster_declaration$incidentBeginDate, format = "%Y-%m-%dT%H:%M:%S.%OS")
disaster_declaration$year <- year(disaster_declaration$incidentBeginDate)
#disaster_summary <- read.csv("C:\\Users\\wangj\\Desktop\\ADS-Project2\\FemaWebDisasterSummaries.csv")
#disaster_summary <- disaster_summary[,-c(9,10,12:14)]
#disaster_approved <- inner_join(disaster_declaration, disaster_summary, by = "disasterNumber")
#disaster_owner <- read.csv("C:\\Users\\wangj\\Desktop\\ADS-Project2\\HousingAssistanceOwners.csv")
#disaster_renter <- read.csv("C:\\Users\\wangj\\Desktop\\ADS-Project2\\HousingAssistanceRenters.csv")
top_incident <- disaster_declaration%>%group_by(year, incidentType)%>%summarize(Frequency=n())%>%arrange(year, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
disaster_declaration_na <- colSums(is.na(disaster_declaration))
#disaster_summary_na <- colSums(is.na(disaster_summary))
top_states <- disaster_declaration%>%group_by(year, stateName)%>%summarize(Frequency=n())%>%arrange(year, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
#setdiff(disaster_renter$disasterNumber,disaster_declaration$disasterNumber)
#unique(filter(disaster_declaration,disaster_declaration$stateCode == "AZ")$year)
length(unique(disaster_declaration$disasterNumber))
data <- read.csv("owners_summary_zip.csv")
summary_data <- data %>%
group_by(latitude, longitude) %>%
summarise(
Total_Damage_Sum = sum(total_damage_sum, na.rm = TRUE),
Total_Approved_Amount_Sum = sum(total_approved_amount_sum, na.rm = TRUE),
.groups = 'drop'
)
try_fil <- data %>% filter(latitude>10) %>% filter(incidentType == c('Hurricane', 'Tornado'))
# generate data after applying the filters for map tab
generate_summary_data <- function(state_names, disaster_names) {
if (all(state_names == "None") && all(disaster_names == "None")) {
filtered_data <- data
} else if (all(state_names == "None")) {
filtered_data <- data %>% filter(incidentType %in% disaster_names)
} else if (all(disaster_names == "None")) {
filtered_data <- data %>% filter(state %in% state_names)
} else {
filtered_data <- data %>% filter(state %in% state_names & incidentType %in% disaster_names)
}
summary_data <- filtered_data %>%
group_by(latitude, longitude) %>%
summarise(
Total_Damage_Sum = sum(total_damage_sum, na.rm = TRUE),
Total_Approved_Amount_Sum = sum(total_approved_amount_sum, na.rm = TRUE),
.groups = 'drop'
)
return(summary_data)
}
# generate data after applying the filters for statistics tab
generate_summary_data_stat <- function(state_names, disaster_names, dam_per, apamt_per) {
if (all(state_names == "None") && all(disaster_names == "None")) {
filtered_data <- data
} else if (all(state_names == "None")) {
filtered_data <- data %>% filter(incidentType %in% disaster_names)
} else if (all(disaster_names == "None")) {
filtered_data <- data %>% filter(state %in% state_names)
} else {
filtered_data <- data %>% filter(state %in% state_names & incidentType %in% disaster_names)
}
summary_data <- filtered_data %>%
filter(total_damage_sum >= quantile(filtered_data$total_damage_sum,dam_per/100)) %>%
filter(total_approved_amount_sum >= quantile(filtered_data$total_approved_amount_sum,apamt_per/100)) %>%
group_by(latitude, longitude) %>%
summarise(
Total_Damage_Sum = sum(total_damage_sum, na.rm = TRUE),
Total_Approved_Amount_Sum = sum(total_approved_amount_sum, na.rm = TRUE),
IncidentType = incidentType,
.groups = 'drop'
)
return(summary_data)
}
data$incidentType
shiny('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
shiny('D:/rscript')
shinyAppDir('D:/rscript')
shinyAppDir('D:/rscript')
library(shiny)
shinyAppDir('D:/rscript')
disaster_declaration <- read.csv("FemaWebDisasterDeclarations.csv")
regions <- read.csv("US_States_and_Regions.csv")
disaster_declaration <- disaster_declaration[,-c(2,5,10:13,18:20)]
disaster_declaration$stateName <- trimws(disaster_declaration$stateName)
disaster_declaration <- disaster_declaration[disaster_declaration$stateName %in% c(unique(regions$stateName)), ]
disaster_declaration$incidentBeginDate <- as.POSIXct(disaster_declaration$incidentBeginDate, format = "%Y-%m-%dT%H:%M:%S.%OS")
disaster_declaration$year <- year(disaster_declaration$incidentBeginDate)
disaster_summary <- read.csv("FemaWebDisasterSummaries.csv")
disaster_declaration <- read.csv("FemaWebDisasterDeclarations.csv")
regions <- read.csv("US_States_and_Regions.csv")
disaster_declaration <- disaster_declaration[,-c(2,5,10:13,18:20)]
disaster_declaration$stateName <- trimws(disaster_declaration$stateName)
disaster_declaration <- disaster_declaration[disaster_declaration$stateName %in% c(unique(regions$stateName)), ]
disaster_declaration$incidentBeginDate <- as.POSIXct(disaster_declaration$incidentBeginDate, format = "%Y-%m-%dT%H:%M:%S.%OS")
disaster_declaration$year <- year(disaster_declaration$incidentBeginDate)
disaster_summary <- disaster_summary[,-c(9,10,12:14)]
disaster_declaration <- read.csv("FemaWebDisasterDeclarations.csv")
regions <- read.csv("US_States_and_Regions.csv")
disaster_declaration <- disaster_declaration[,-c(2,5,10:13,18:20)]
disaster_declaration$stateName <- trimws(disaster_declaration$stateName)
disaster_declaration <- disaster_declaration[disaster_declaration$stateName %in% c(unique(regions$stateName)), ]
disaster_declaration$incidentBeginDate <- as.POSIXct(disaster_declaration$incidentBeginDate, format = "%Y-%m-%dT%H:%M:%S.%OS")
disaster_declaration$year <- year(disaster_declaration$incidentBeginDate)
disaster_approved <- inner_join(disaster_declaration, disaster_summary, by = "disasterNumber")
disaster_owner <- read.csv("HousingAssistanceOwners.csv")
disaster_renter <- read.csv("HousingAssistanceRenters.csv")
disaster_renter <- read.csv("HousingAssistanceRenters.csv")
top_incident <- disaster_declaration%>%group_by(year, incidentType)%>%summarize(Frequency=n())%>%arrange(year, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
disaster_declaration_na <- colSums(is.na(disaster_declaration))
disaster_summary_na <- colSums(is.na(disaster_summary))
top_states <- disaster_declaration%>%group_by(year, stateName)%>%summarize(Frequency=n())%>%arrange(year, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
#Most prevalent disaster by state
top_disaster_state <- disaster_declaration%>%group_by(stateName, incidentType)%>%summarize(Frequency=n())%>%arrange(stateName, desc(Frequency))%>%slice_max(order_by = Frequency, n = 1)
state_boundaries <- read_sf("state_boundaries/state_boundaries/cb_2019_us_state_5m.shp")
library(sf)
state_boundaries <- read_sf("state_boundaries/state_boundaries/cb_2019_us_state_5m.shp")
state_boundaries <- st_transform(state_boundaries, crs = "+proj=longlat +datum=WGS84")
merged_data <- merge(state_boundaries, disaster_declaration, by.x = "NAME", by.y = "stateName", all.x = FALSE)
disaster_freq_state <- disaster_declaration%>%group_by(stateName)%>%summarize(Frequency=n())
shinyAppDir("D:/rscript")
shinyAppDir("D:/rscript")
shinyAppDir("D:/rscript")
library(shiny)
shinyAppDir('D:/rscript')
source('global.R')
getwd()
getwd('global.R')
setwd('.../data')
